Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original
key plus the sum of all keys greater than the original key in BST.
As a reminder, a binary search tree is a tree that satisfies these constraints:
The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 
Example 1:
Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]

Example 2:
Input: root = [0,null,1]
Output: [1,null,1]
 
Constraints:
The number of nodes in the tree is in the range [1, 100].
0 <= Node.val <= 100
All the values in the tree are unique.


Solution1:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int>v,cum;
    TreeNode* bstToGst(TreeNode* root) {
        inorder(root);
        int p=0;
        for(int i=0;i<v.size();i++)
        {
            p+=v[i];
            cum.push_back(p);
        }
        solve(root);
        return root;
    }
    
    void inorder(TreeNode* root)
    {
        if(root==NULL) return;
        inorder(root->left);
        v.push_back(root->val);
        inorder(root->right);
    }
    void solve(TreeNode* root)
    {
        if(root==NULL) return;
        
        int d=root->val;
        int pos=upper_bound(v.begin(),v.end(),d)-v.begin();
        
        pos=pos-1;
        int sz=v.size();
        int b=(cum[sz-1]-cum[pos])+root->val;
        root->val=b;
        
        solve(root->left);
        solve(root->right);
    }
    
    
};

 
Solution2:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int>v,cum;
    int p=0;
    TreeNode* bstToGst(TreeNode* root) {
        inorder(root);
        return root;
    }
    
    void inorder(TreeNode* root)
    {
        if(root==NULL) return;
        inorder(root->right);
        root->val=p+root->val;
        p=root->val;
        inorder(root->left);
    }
  
    
};

