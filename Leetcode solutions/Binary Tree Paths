Given the root of a binary tree, return all root-to-leaf paths in any order.
A leaf is a node with no children.

Example 1:

Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]

Example 2:
Input: root = [1]
Output: ["1"]
 
Constraints:
The number of nodes in the tree is in the range [1, 100].
-100 <= Node.val <= 100


Solution:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    
    List<string>ans=new List<string>();
    void path(TreeNode root,string str)
    {
        if(root==null) return;
        if(root!=null)
        {
            if(str=="")
            {
                str+=root.val.ToString();
            }
            else
            {
                str+="->"+root.val.ToString();
            }
        }
        if(root.left==null&&root.right==null)
        {
            ans.Add(str);
        }
        path(root.left,str);
        path(root.right,str);
        
        
    }
    
    public List<string> BinaryTreePaths(TreeNode root) {
        
        path(root,"");
        return ans;
    }
}
