Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST such that their sum is equal to the given target.

Example 1:
Input: root = [5,3,6,2,4,null,7], k = 9
Output: true

Example 2:
Input: root = [5,3,6,2,4,null,7], k = 28
Output: false

Example 3:
Input: root = [2,1,3], k = 4
Output: true

Example 4:
Input: root = [2,1,3], k = 1
Output: false


Solution:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    set<int>s;
    set<int>::iterator it;
    map<int,int>m;
    
    bool findTarget(TreeNode* root, int k) {
        test(root);
        for(it=s.begin();it!=s.end();it++)
        {
           
            int p=*it;
            
                int x=k-p;
                
                if(p==x)
                {
                    if(m[x]>=2) return true;
                }
                else
                {
                    //cout<<x<<endl;
                    if(s.find(x) != s.end())
                    {
                        return true;
                    }
                }
            
        }
        return false;
    }
    
    void test(TreeNode* root)
    {
        if(root==NULL)
            return;
        s.insert(root->val);
        m[root->val]++;
        test(root->left);
        test(root->right);
    }
};
