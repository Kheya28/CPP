Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if 
it were inserted in order.
You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [1,3,5,6], target = 5
Output: 2

Example 2:
Input: nums = [1,3,5,6], target = 2
Output: 1

Example 3:
Input: nums = [1,3,5,6], target = 7
Output: 4

Solution:
#define ll long long int 
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        ll len=nums.size();
        ll ans=len;
        
        if(target<nums[0])
        {
            return 0;
        }
        for(ll i=0;i<len;i++)
        {
            if(nums[i]==target)
            {
                ans=i;
                break;
            }
            if(nums[i]<target)
            {
                ans=i+1;
            }
        }
        
        return ans;
    }
};
